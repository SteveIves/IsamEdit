<?xml version='1.0'?>
<!--Generated by xmldoc v9.5.3b on 05 OCT 2012 15:40:51-->
<doc>
  <assembly>
    <name>ClassViewControl</name>
  </assembly>
  <members>
    <member name="M:IsamEdit.MAIN$PROGRAM">
       <summary>
       The main entry point for the application.
       </summary>
    </member>
    <member name="T:IsamEdit.Tools.CodeGenerationHelper">
       <summary>
       The CodeGenerationHelper class allows you to easily define and create dynamic class instances.
       The class is static and contains only two method members: GetCodeString, and InstantiateClass.
       To create a class first call the GetCodeString method with the appropriate arguments, then
       store the returned code string for re-use as it can be thought of as your dynamic class’s
       definition. When you want to create an instance of your dynamic class pass the generated
       code string into the InstantiateClass method, and a new instance of the class will be returned.
       This class is not intended to be used directly because it&apos;s functionality is wrapped by the 
       DynamicClassFactory class.
       </summary>
    </member>
    <member name="M:IsamEdit.Tools.CodeGenerationHelper.addPublicProperty(System.CodeDom.CodeTypeDeclaration,System.String,System.Type,System.Boolean)">
       <summary>
       Adds a new public property to a class. Also adds a private field to propagate the
       properties value.
      </summary>
    </member>
    <member name="M:IsamEdit.Tools.CodeGenerationHelper.addPrivateField(System.CodeDom.CodeTypeDeclaration,System.String,System.Type,System.Boolean)">
       <summary>
       Adds a new private field to a class, and optionally initializes it to a default value
      </summary>
    </member>
    <member name="T:IsamEdit.Tools.DynamicClassFactory">
       <summary>
       The DynamicClassFactory class wraps the functionality of the CodeGenerationHelper class, and
       provides methods for getting and setting properties, and registering / de-registering
       propertychanged event handlers.
       
       NOTE: There is one minor issue that I have not yet resolved: Anytime a property needs to be get
       or set, an object instance must be passed in. The DynamicFactory then takes that object instance 
       and gets it’s type, then uses the type to get its properties as propertyinfos’. The property info 
       is then used to either get or set the property. My intention was to only do this once and save 
       the propertyinfos for re-use, however I end up with a type-mismatch error everytime I call 
       SetValue on them. Therefore, the propertyinfos are retrieved on every call to SetProperty and 
       GetProperty… keep that in mind.
       
       The most important methods on this class are Create, GetProperty, SetProperty, and 
       AddPropertyChangedEventHandler. The constructor takes all the arguments you give it and passes 
       them along to the CodeGenerationHelper to get a code string for the dynamic class and stores 
       them for re-use. After you have an instance of the DynamicFactory you’ll be all set to start 
       creating instances of your dynamic class. This is achieved by calling the Create method, which 
       simply passes the stored code string generated during the constructor to the CodeGenerationHelper. 
       The Create method will return a new instance of your dynamic class. If you intended to be notified 
       of propertychange events you’ll want to make a call to the AddPropertyChangedEventHandler which 
       simply takes a PropertyChangedEventHandler. This handler will be called anytime a property on your 
       dynamic class is changed. The GetProperty and SetProperty methods get and set properties on your 
       dynamic class.
        </summary>
    </member>
    <member name="T:IsamEdit.Properties.Resources">
       <summary>
         A strongly-typed resource class, for looking up localized strings, etc.
       </summary>
    </member>
    <member name="P:IsamEdit.Properties.Resources.ResourceManager">
       <summary>
         Returns the cached ResourceManager instance used by this class.
       </summary>
    </member>
    <member name="P:IsamEdit.Properties.Resources.Culture">
       <summary>
         Overrides the current thread&apos;s CurrentUICulture property for all
         resource lookups using this strongly typed resource class.
       </summary>
    </member>
  </members>
</doc>
