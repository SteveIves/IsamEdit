
import System
import System.Collections.Generic
import System.Text
import SynPsg.Rps

.Array 0
namespace IsamEdit.Tools
	
	public static class DataConverter
		
		public static method NetDecimalFromSynImplied, decimal
			required in aVal		,string
			required in precision	,int
			endparams
			record
				stringVal			,string
				longVal				,long
				decVal				,decimal, 0
				isNegative			,boolean
				divisor				,[#]long
			endrecord
		proc
			stringVal = aVal
			
			divisor = new long[#] { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000, 10000000000 }
			
			using stringVal.Substring(stringVal.Length - 1, 1) select			
			("p"),
			begin
				stringVal = stringVal.Substring(0, stringVal.Length - 1) + "0"
				isNegative = false
			end
			("q"),
				stringVal = stringVal.Substring(0, stringVal.Length - 1) + "1"
			("r"),
				stringVal = stringVal.Substring(0, stringVal.Length - 1) + "2"
			("s"),
				stringVal = stringVal.Substring(0, stringVal.Length - 1) + "3"
			("t"),
				stringVal = stringVal.Substring(0, stringVal.Length - 1) + "4"
			("u"),
				stringVal = stringVal.Substring(0, stringVal.Length - 1) + "5"
			("v"),
				stringVal = stringVal.Substring(0, stringVal.Length - 1) + "6"
			("w"),
				stringVal = stringVal.Substring(0, stringVal.Length - 1) + "7"
			("x"),
				stringVal = stringVal.Substring(0, stringVal.Length - 1) + "8"
			("y"),
				stringVal = stringVal.Substring(0, stringVal.Length - 1) + "9"
			(),
				isNegative = false
			endusing
			
			;;Make sure what remains is a numeric integer
			if (Long.TryParse(stringVal, longVal))
			begin
				decVal = Decimal.Divide(longVal,divisor[precision])
				if (isNegative)
					decVal = -decVal
			end
			
			mreturn decVal
			
		endmethod
		
		public static method NetLongFromSynDecimal, Long
			required in aVal		,string
			endparams
			record
				stringVal			,string
				longVal				,long, 0
				isNegative			,boolean
			endrecord
		proc
			
			stringVal = aVal
			
			using stringVal.Substring(stringVal.Length - 1, 1) select			
			("p"),
			begin
				stringVal = stringVal.Substring(0, stringVal.Length - 1) + "0"
				isNegative = false
			end
			("q"),
				stringVal = stringVal.Substring(0, stringVal.Length - 1) + "1"
			("r"),
				stringVal = stringVal.Substring(0, stringVal.Length - 1) + "2"
			("s"),
				stringVal = stringVal.Substring(0, stringVal.Length - 1) + "3"
			("t"),
				stringVal = stringVal.Substring(0, stringVal.Length - 1) + "4"
			("u"),
				stringVal = stringVal.Substring(0, stringVal.Length - 1) + "5"
			("v"),
				stringVal = stringVal.Substring(0, stringVal.Length - 1) + "6"
			("w"),
				stringVal = stringVal.Substring(0, stringVal.Length - 1) + "7"
			("x"),
				stringVal = stringVal.Substring(0, stringVal.Length - 1) + "8"
			("y"),
				stringVal = stringVal.Substring(0, stringVal.Length - 1) + "9"
			(),
				isNegative = false
			endusing
			
			;;Make sure what remains is a numeric integer
			if (Long.TryParse(stringVal, longVal))
			begin
				if (isNegative)
					longVal = -longVal
			end
			
			mreturn longVal
			
		endmethod
		
		public static method IsLeapYear, Boolean
			year, int
			endparams
		proc
			if ((year / 4) * 4 .ne. year)
				mreturn false
			if (year.lt.1582)
				mreturn true
			if ((year / 100) * 100 != year)
				mreturn true
			if ((year / 400) * 400 != year)
				mreturn false
			mreturn true
		endmethod
		
	endclass
	
endnamespace

