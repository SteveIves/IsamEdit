;;******************************************************************************
;;
;; Class:       DataConverter
;;
;; Description:	Various data conversion utilities
;;
;; Author:		Steve Ives, Synergex Professional Services Group
;;
;;******************************************************************************
;; Copyright (c) 2012, Steve Ives
;; All rights reserved.
;;
;; Redistribution and use in source and binary forms, with or without
;; modification, are permitted provided that the following conditions are met:
;;
;; * Redistributions of source code must retain the above copyright notice, this
;;   list of conditions and the following disclaimer.
;;
;; * Redistributions in binary form must reproduce the above copyright notice,
;;   this list of conditions and the following disclaimer in the documentation
;;   and/or other materials provided with the distribution.
;;
;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
;; DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
;; FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
;; DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
;; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
;; CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
;; OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
;; OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
;;
;;******************************************************************************
;;

import System
import System.Collections.Generic
import System.Text
import SynPsg.Rps

.Array 0
namespace IsamEdit.Tools
	
	public static class DataConverter
		
		public static method NetDecimalFromSynImplied, decimal
			required in aVal		,string
			required in precision	,int
			endparams
			record
				stringVal			,string
				longVal				,long
				decVal				,decimal, 0
				isNegative			,boolean
				divisor				,[#]long
			endrecord
		proc
			stringVal = aVal
			
			divisor = new long[#] { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000, 10000000000 }
			
			using stringVal.Substring(stringVal.Length - 1, 1) select			
			("p"),
			begin
				stringVal = stringVal.Substring(0, stringVal.Length - 1) + "0"
				isNegative = false
			end
			("q"),
				stringVal = stringVal.Substring(0, stringVal.Length - 1) + "1"
			("r"),
				stringVal = stringVal.Substring(0, stringVal.Length - 1) + "2"
			("s"),
				stringVal = stringVal.Substring(0, stringVal.Length - 1) + "3"
			("t"),
				stringVal = stringVal.Substring(0, stringVal.Length - 1) + "4"
			("u"),
				stringVal = stringVal.Substring(0, stringVal.Length - 1) + "5"
			("v"),
				stringVal = stringVal.Substring(0, stringVal.Length - 1) + "6"
			("w"),
				stringVal = stringVal.Substring(0, stringVal.Length - 1) + "7"
			("x"),
				stringVal = stringVal.Substring(0, stringVal.Length - 1) + "8"
			("y"),
				stringVal = stringVal.Substring(0, stringVal.Length - 1) + "9"
			(),
				isNegative = false
			endusing
			
			;;Make sure what remains is a numeric integer
			if (Long.TryParse(stringVal, longVal))
			begin
				decVal = Decimal.Divide(longVal,divisor[precision])
				if (isNegative)
					decVal = -decVal
			end
			
			mreturn decVal
			
		endmethod
		
		public static method NetLongFromSynDecimal, Long
			required in aVal		,string
			endparams
			record
				stringVal			,string
				longVal				,long, 0
				isNegative			,boolean
			endrecord
		proc
			
			stringVal = aVal
			
			using stringVal.Substring(stringVal.Length - 1, 1) select			
			("p"),
			begin
				stringVal = stringVal.Substring(0, stringVal.Length - 1) + "0"
				isNegative = false
			end
			("q"),
				stringVal = stringVal.Substring(0, stringVal.Length - 1) + "1"
			("r"),
				stringVal = stringVal.Substring(0, stringVal.Length - 1) + "2"
			("s"),
				stringVal = stringVal.Substring(0, stringVal.Length - 1) + "3"
			("t"),
				stringVal = stringVal.Substring(0, stringVal.Length - 1) + "4"
			("u"),
				stringVal = stringVal.Substring(0, stringVal.Length - 1) + "5"
			("v"),
				stringVal = stringVal.Substring(0, stringVal.Length - 1) + "6"
			("w"),
				stringVal = stringVal.Substring(0, stringVal.Length - 1) + "7"
			("x"),
				stringVal = stringVal.Substring(0, stringVal.Length - 1) + "8"
			("y"),
				stringVal = stringVal.Substring(0, stringVal.Length - 1) + "9"
			(),
				isNegative = false
			endusing
			
			;;Make sure what remains is a numeric integer
			if (Long.TryParse(stringVal, longVal))
			begin
				if (isNegative)
					longVal = -longVal
			end
			
			mreturn longVal
			
		endmethod
		
		public static method IsLeapYear, Boolean
			year, int
			endparams
		proc
			if ((year / 4) * 4 .ne. year)
				mreturn false
			if (year.lt.1582)
				mreturn true
			if ((year / 100) * 100 != year)
				mreturn true
			if ((year / 400) * 400 != year)
				mreturn false
			mreturn true
		endmethod
		
	endclass
	
endnamespace

