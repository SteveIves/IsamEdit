;;******************************************************************************
;;
;; Class:		SynPsg.Rps.RpsEnumMemberCollection
;;
;; Description:	Represents a collection of members for a Repository enumeration
;;
;; Author:		Steve Ives, Synergex Professional Services Group
;;
;; Date: 		2nd November 2009
;;
;;******************************************************************************
;; Copyright (c) 2009, Steve Ives
;; All rights reserved.
;;
;; Redistribution and use in source and binary forms, with or without
;; modification, are permitted provided that the following conditions are met:
;;
;; * Redistributions of source code must retain the above copyright notice, this
;;   list of conditions and the following disclaimer.
;;
;; * Redistributions in binary form must reproduce the above copyright notice,
;;   this list of conditions and the following disclaimer in the documentation
;;   and/or other materials provided with the distribution.
;;
;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
;; DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
;; FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
;; DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
;; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
;; CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
;; OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
;; OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
;;
;;******************************************************************************
;;

.define DDINFO_DEFINES_ONLY
.include "RPSLIB:ddinfo.def"
.undefine DDINFO_DEFINES_ONLY

import SynPsg.Rps
import System.Collections.Generic

namespace SynPsg.Rps

	public class RpsEnumMemberCollection extends List<RpsEnumMember>
		
		; Constructor (don't load any members)
		public method RpsEnumMemberCollection
			endparams
			parent()
		proc
		endmethod

		; Constructor (load members for named enum)
		public method RpsEnumMemberCollection
			required in EnumName, a
			endparams
			parent()
		proc
			Repository.CheckIsOpen()
			LoadMembers(EnumName)
		endmethod
		
		; Load members
		private method LoadMembers, void
			required in EnumName, a
			endparams
			record local_data
				MemHandleName, int
				MemHandleValue, int
				ix, int
			endrecord
			structure strEnumValue
				,a11
			endstructure
		proc
			init local_data
			try 
			begin
				data p_e_info, e_info
				;Set the current enum and get enum information

				dd_enum(Repository.RpsControl,DDE_INFO,EnumName,^a(p_e_info))
				if (Repository.RpsControl.error)
					throw new RpsEnumException("Failed to get information for repository enumeration "+EnumName)
				;Do we have any members to load?
				if (p_e_info.ei_nmmbrs)
				begin
					;Size the member names and values arrays and get the data
					MemHandleName = %mem_proc(DM_ALLOC,^size(strIdentifier)*p_e_info.ei_nmmbrs)
					MemHandleValue = %mem_proc(DM_ALLOC,^size(strEnumValue)*p_e_info.ei_nmmbrs)
					dd_enum(Repository.RpsControl,DDE_MBRS,p_e_info.ei_nmmbrs,^m(strIdentifier,MemHandleName),^m(strEnumValue,MemHandleValue))
					if (Repository.RpsControl.error)
						throw new RpsEnumException("Failed to get members for repository enumeration "+EnumName)
					;Add members to the collection
					for ix from 1 thru p_e_info.ei_nmmbrs
					begin
						data MemberName , a30
						data ExplicitValue, a11
						data ImplicitValue, a11, ""
						MemberName = ^m(strIdentifier[ix],MemHandleName)
						ExplicitValue = ^m(strEnumValue[ix],MemHandleValue)
						if (ExplicitValue) then 
							ImplicitValue = ExplicitValue
						else
						begin
							;;Figure out the implicit value for the new member
							if (this.Count==0) then 
								ImplicitValue = "0"
							else
							begin
								;Workaround for bug in %integer with negative numbers in 9.2.1
								data mbr, @RpsEnumMember
								data tmpd, d18
								mbr = (RpsEnumMember)this[this.Count]
								tmpd = mbr.ImplicitValue
								ImplicitValue = tmpd + 1 [LEFT]
							end
						end
						this.Add(new RpsEnumMember(EnumName,MemberName,ExplicitValue,ImplicitValue))
					end
				end
			end
			finally
			begin
				;Free arrays
				if (MemHandleName)
					MemHandleName = %mem_proc(DM_FREE,MemHandleName)
				if (MemHandleValue)
					MemHandleValue = %mem_proc(DM_FREE,MemHandleValue)
			end
			endtry
		endmethod	
		
	endclass

endnamespace
