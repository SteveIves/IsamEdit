;******************************************************************************
;
; Class:		SynPsg.Rps.RpsFieldCollection
;
; Description:	Represents a collection of fields for a Repository structure
;
; Author:		Steve Ives, Synergex Professional Services Group
;
; Date: 		19th October 2007
;
;******************************************************************************
;
; This code is supplied as seen and without warranty or support, and is used
; at your own risk. Neither the author or Synergex accept any responsability
; for any loss or damage which may result from the use of this code.
;
;******************************************************************************
;
; $Revision: 2 $
;
; $Date: 2012-07-11 12:10:55-07:00 $
;
;******************************************************************************
;
.define DDINFO_DEFINES_ONLY
.include "RPSLIB:ddinfo.def"
.undefine DDINFO_DEFINES_ONLY

import SynPsg.Rps
import System.Collections.Generic

namespace SynPsg.Rps

	public class RpsFieldCollection extends List<RpsField>
		
		; Constructor (don't load any fields)
		public method RpsFieldCollection
			endparams
			parent()
		proc
		endmethod

		; Constructor (load fields for a structure)
		public method RpsFieldCollection
			required in StructureName, a
			endparams
			parent()
		proc
			Repository.CheckIsOpen()
			LoadFields(StructureName)
		endmethod
		
		; Load structure fields
		private method LoadFields, void
			required in StructureName, a
			endparams
			record local_data
				MemHandle, int
				ix, int
			endrecord
		proc
			init local_data
			try 
			begin
				data p_s_info, s_info
				;Set the current structure and get structure information
				dd_struct(Repository.RpsControl,DDS_INFO,StructureName,p_s_info)
				if (Repository.RpsControl.error)
					throw new RpsFieldException("Failed to get information for repository structure "+StructureName)
				;Do we have any fields to load?
				if (p_s_info.si_childct) 
				begin
					;Size the field names array and get field names
					MemHandle = %mem_proc(DM_ALLOC,^size(strIdentifier)*p_s_info.si_childct)
					dd_field(Repository.RpsControl,DDF_SLIST,p_s_info.si_childct,^m(strIdentifier,MemHandle))
					if (Repository.RpsControl.error)
						throw new RpsFieldException("Failed to get field names for repository structure "+StructureName)
					;Add fields to the collection
					for ix from 1 thru p_s_info.si_childct
						this.Add(new RpsField(StructureName,^m(strIdentifier[ix],MemHandle)))
				end
			end
			finally
			begin
				;Free field names array
				if (MemHandle)
                    MemHandle = %mem_proc(DM_FREE,MemHandle)
			end
			endtry
		endmethod
		
		; Remove overlay fields from the collection
		public method RemoveOverlays, void
			record 
				index, int, 0
			endrecord
		proc
			repeat
			begin
				if (index<=(this.Count - 1)) then
				begin
					if (this[index].OverlaysField) then
						this.RemoveAt(index)
					else
						index+=1
				end
				else
					exitloop
			end
		endmethod

		; Remove fields marked as "Excluded by Language" from the collection
		public method RemoveExcludedByLanguage, void
			record 
				index, int, 0
			endrecord
		proc
			repeat
			begin
				if (index<=(this.Count - 1)) then
				begin
					if (this[index].ExcludedByLanguage) then
						this.RemoveAt(index)
					else
						index+=1
				end
				else
					exitloop
			end
		endmethod

		; Remove fields marked as "Excluded by Toolkit" from the collection
		public method RemoveExcludedByToolkit, void
			record 
				index, int, 0
			endrecord
		proc
			repeat
			begin
				if (index<=(this.Count - 1)) then
				begin
					if (this[index].ExcludedByToolkit) then
						this.RemoveAt(index)
					else
						index+=1
				end
				else
					exitloop
			end
		endmethod

		; Remove fields marked as "Excluded by ReportWriter" from the collection
		public method RemoveExcludedByReportWriter, void
			record 
				index, int, 0
			endrecord
		proc
			repeat
			begin
				if (index<=(this.Count - 1)) then
				begin
					if (this[index].ExcludedByReportWriter) then
						this.RemoveAt(index)
					else
						index+=1
				end
				else
					exitloop
			end
		endmethod

		; Remove fields marked as "Excluded by Web" from the collection
		public method RemoveExcludedByWeb, void
			record 
				index, int, 0
			endrecord
		proc
			repeat
			begin
				if (index<=(this.Count - 1)) then
				begin
					if (this[index].ExcludedByWeb) then
						this.RemoveAt(index)
					else
						index+=1
				end
				else
					exitloop
			end
		endmethod

	endclass

endnamespace
