;;******************************************************************************
;;
;; Class:		SynPsg.Rps.RpsTemplateCollection
;;
;; Description:	Represents a collection of Repository templates
;;
;; Author:		Steve Ives, Synergex Professional Services Group
;;
;; Date: 		19th October 2007
;;
;;******************************************************************************
;; Copyright (c) 2007, Steve Ives
;; All rights reserved.
;;
;; Redistribution and use in source and binary forms, with or without
;; modification, are permitted provided that the following conditions are met:
;;
;; * Redistributions of source code must retain the above copyright notice, this
;;   list of conditions and the following disclaimer.
;;
;; * Redistributions in binary form must reproduce the above copyright notice,
;;   this list of conditions and the following disclaimer in the documentation
;;   and/or other materials provided with the distribution.
;;
;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
;; DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
;; FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
;; DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
;; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
;; CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
;; OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
;; OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
;;
;;******************************************************************************
;;

.define DDINFO_DEFINES_ONLY
.include "RPSLIB:ddinfo.def"
.undefine DDINFO_DEFINES_ONLY

import SynPsg.Rps
import System.Collections.Generic

namespace SynPsg.Rps

	public class RpsTemplateCollection extends List<RpsTemplate>
		
		; Constructor (load all templates)
		public method RpsTemplateCollection
			endparams
			parent()
		proc
			Repository.CheckIsOpen()
			LoadTemplates()
		endmethod
		
		; Load templates
		private method LoadTemplates, void
			endparams
			record local_data
				MemHandle, int
				TemplateCount, int
				ix,	int
			endrecord
		proc
			init local_data
			try 
			begin
				;Get the number of templates in the repository
				dd_name(Repository.RpsControl,DDN_COUNT,DDN_TEMPLATE,TemplateCount)
				if (Repository.RpsControl.error)
					throw new RpsTemplateException("Failed to get number of repository templates")
				;Do we have any templates to load?
				if (TemplateCount) 
				begin
					;Allocate template name memory and get template names
					MemHandle = %mem_proc(DM_ALLOC,^size(strIdentifier)*TemplateCount)
					dd_name(Repository.RpsControl,DDN_LIST,DDN_TEMPLATE,TemplateCount,^m(strIdentifier,MemHandle))
					if (Repository.RpsControl.error)
						throw new RpsTemplateException("Failed to get repository template names")
					for ix from 1 thru TemplateCount
						this.Add(new RpsTemplate(^m(strIdentifier[ix],MemHandle)))
				end
			end
			finally
			begin
				;Release template names memory
				if (TemplateCount) 
					MemHandle = %mem_proc(DM_FREE,MemHandle)
			end
			endtry
		endmethod

	endclass

endnamespace
